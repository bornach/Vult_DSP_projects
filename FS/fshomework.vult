/* Experimental synth - 4 note polyphony*/

fun pitchToRate(pitch) @[table(size=32, min=0.0, max=127.0)] {
   // 1.0 /44100 440 2^((pitch - 69)/12.)
   return 0.00018539226566085504 * exp(0.057762265046662105 * pitch);
}

// Main processing function
// 'input' is by default a sine wave at 440 Hz
fun process(input:real){
    mem key : array(int, 4); // which MIDI key
    mem dt:array(real,4);    // oscillator increment
    mem t:array(real,4);     // oscillator wave position [0..1)
    mem tpm:array(real,4);   // phase modulation

    // envelope
    mem en_t:array(real, 4);
    mem en_a:array(real, 4);
    mem en_v:array(real, 4);

    // filter
    mem c0:array(real, 4);
    mem r0:array(real, 4);
    mem a0:array(real, 4);
    mem a1:array(real, 4);
    mem a2:array(real, 4);
    mem b0:array(real, 4);
    mem b1:array(real, 4);
    mem x0:array(real, 4);
    mem x1:array(real, 4);
    mem q0:array(real, 4);
    mem q1:array(real, 4);

    mem off:real;
    mem fold:real;
    mem phasemod:real;
    mem attack:real;
    mem decay:real;
    mem sustain:real;
    mem release:real;
    mem cutoff:real;
    mem resonance:real;
    mem lfo:real;
    mem lfo_rate:real;
    mem lfo_a:real;
    mem lfo_p:real;

    val i = 0;
    val out = 0.0;
    while (i < 4) {
        // LFO
        lfo = (lfo+lfo_rate) % 2.0;
        val r = 1.0 + lfo_p*abs(lfo-1.0);
        // saw wave
        t[i] = (t[i] + dt[i]*r) % 1.0;
        tpm[i] = (tpm[i] + 4.0*dt[i]) % 1.0;
        val v = (t[i] + phasemod*abs(tpm[i]-0.5)) % 1.0;

        // turn saw into triangle wave as (off) approaches 0.5
        v = (0.5 * (0.5 + off) * abs(v-off) - 0.125)*fold;
        // wave folder
        v = if (v > -0.125) then v else if (v > -0.25) then (v-0.25) else (v+0.25);
        val v_in = if (v < 0.125) then v else if (v < 0.25) then (0.25-v) else (v-0.25);

        // Low pass filter https://www.musicdsp.org/en/latest/Filters/38-lp-and-hp-filter.html
        val coff = cutoff*dt[i];
        coff = if (coff < 1.5) then coff else 1.5;
        if ((coff>0.0) && ((c0[i]<>coff) || (r0[i]<>resonance))) {
            val c = 1.0 / tan(coff);
            a0[i] = 1.0 / ( 1.0 + resonance * c + c * c);
            a1[i] = 2.0 * a0[i];
            a2[i] = a0[i];
            b0[i] = 2.0 * ( 1.0 - c*c) * a0[i];
            b1[i] = ( 1.0 - resonance * c + c * c) * a0[i];
            c0[i] = coff;
            r0[i] = resonance;
        }

        v = a0[i] * v_in + a1[i] * x0[i] + a2[i] * x1[i] - b0[i]*q0[i] - b1[i]*q1[i];
        x1[i] = x0[i];
        x0[i] = v_in;
        q1[i] = q0[i];
        q0[i] = v;

        // ADSR
        val et = en_t[i];
        if (key[i] <> 0) {
            et = et + 0.0001;
            val env = if (et < attack) then (et/attack) else if (et-attack < decay) then (1.0-(et-attack)*(1.0-sustain)/decay) else sustain;
            en_v[i] = en_a[i] * env;
            v = v * en_v[i];
        } else if (et < 0.0) {
            et = et + 0.0001;
            v = if (release==0.0) then 0.0 else (et*v*en_v[i]/release);
        } else {
            et = 0.0;
            dt[i] = 0.0;
        }
        en_t[i] = et;

        out = out + v*(1.0-lfo_a*abs(lfo-1.0));
        i = i + 1;
   }
   return out;
}

// Called when a note On is received
and noteOn(note:int,velocity:int,channel:int){
    val i = 4;
    val j = -1;
    while ((i > 0) && (j == -1)) {
        i = i - 1;
        if (key[i] == 0) j = i;
    }
    if (j >= 0) {
        key[j] = note;
        dt[j] = pitchToRate(real(note));
        en_a[j] = 0.2+real(velocity)/160.0;
        en_t[j] = 0.0;
    }
}

// Called when a note Off is received
and noteOff(note:int,channel:int){
    val i = 4;
    while (i > 0) {
        i = i - 1;
        if (key[i] == note) {
            key[i] = 0;
            en_t[i] = release;
        }
    }
}

// Called when a control changes
and controlChange(control:int,value:int,channel:int){
    // saw to triangle wave
    if (control==30) off = real(value)/254.0;
    if (control==31) fold = 1.0+real(value)/64.0;
    if (control==32) phasemod = real(value)/254.0;
    
    // ADSR envelope
    if (control==33) attack = real(value)/127.0;
    if (control==34) decay = real(value)/127.0;
    if (control==35) sustain = real(value)/160.0 + 0.2;
    if (control==36) release = -real(value)/10.0;
    
    // filter controls
    if (control==37) cutoff = exp(real(value)/30.0)-0.25;
    if (control==38) resonance = 0.1+1.3*real(127-value)/127.0;
    
    // LFO
    if (control==39) lfo_rate = 0.00002*exp(real(value)/100.0);
    if (control==40) lfo_a = real(value)/127.0;
    if (control==41) lfo_p = 0.0594*real(value)/127.0;
}

// Called on initialization to define initial values
and default(){
    val i = 0;
    while (i < 4) {
        t[i] = 0.0;
        tpm[i] = 0.0;
        // play a chord on startup to workaround bug in Vult DSP demo website
        dt[i] = exp(real(i)*0.231-5.7);
        key[i] = 0;
        en_a[i] = 0.0;
        en_t[i] = -1.0;
        en_v[i] = 0.25;
        a0[i] = 1.0;
        a1[i] = 0.0;
        a2[i] = 0.0;
        b0[i] = 0.0;
        b1[i] = 0.0;
        x0[i] = 0.0;
        x1[i] = 0.0;
        q0[i] = 0.0;
        q1[i] = 0.0;
        i = i + 1;
    }
    off = 0.0;
    fold = 1.0;
    phasemod = 0.0;
    attack = 0.0;
    decay = 0.0;
    sustain = 1.0;
    release = 1.0;
    cutoff = 50.0;
    resonance = 1.2;
    lfo = 0.0;
    lfo_rate = 0.0;
    lfo_a = 0.0;
    lfo_p = 0.0;
}
